// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.15.6
// source: grpc.proto

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileClient interface {
	UploadInfo(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadRes, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (File_UploadClient, error)
	DownloadInfo(ctx context.Context, in *DownloadReq, opts ...grpc.CallOption) (*DownloadRes, error)
	Download(ctx context.Context, in *DownloadDataReq, opts ...grpc.CallOption) (File_DownloadClient, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) UploadInfo(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadRes, error) {
	out := new(UploadRes)
	err := c.cc.Invoke(ctx, "/File/UploadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Upload(ctx context.Context, opts ...grpc.CallOption) (File_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[0], "/File/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileUploadClient{stream}
	return x, nil
}

type File_UploadClient interface {
	Send(*UploadDataReq) error
	CloseAndRecv() (*UploadRes, error)
	grpc.ClientStream
}

type fileUploadClient struct {
	grpc.ClientStream
}

func (x *fileUploadClient) Send(m *UploadDataReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileUploadClient) CloseAndRecv() (*UploadRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileClient) DownloadInfo(ctx context.Context, in *DownloadReq, opts ...grpc.CallOption) (*DownloadRes, error) {
	out := new(DownloadRes)
	err := c.cc.Invoke(ctx, "/File/DownloadInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) Download(ctx context.Context, in *DownloadDataReq, opts ...grpc.CallOption) (File_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &File_ServiceDesc.Streams[1], "/File/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type File_DownloadClient interface {
	Recv() (*DownloadDataRes, error)
	grpc.ClientStream
}

type fileDownloadClient struct {
	grpc.ClientStream
}

func (x *fileDownloadClient) Recv() (*DownloadDataRes, error) {
	m := new(DownloadDataRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility
type FileServer interface {
	UploadInfo(context.Context, *UploadReq) (*UploadRes, error)
	Upload(File_UploadServer) error
	DownloadInfo(context.Context, *DownloadReq) (*DownloadRes, error)
	Download(*DownloadDataReq, File_DownloadServer) error
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have forward compatible implementations.
type UnimplementedFileServer struct {
}

func (UnimplementedFileServer) UploadInfo(context.Context, *UploadReq) (*UploadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadInfo not implemented")
}
func (UnimplementedFileServer) Upload(File_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFileServer) DownloadInfo(context.Context, *DownloadReq) (*DownloadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadInfo not implemented")
}
func (UnimplementedFileServer) Download(*DownloadDataReq, File_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_UploadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).UploadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/File/UploadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).UploadInfo(ctx, req.(*UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServer).Upload(&fileUploadServer{stream})
}

type File_UploadServer interface {
	SendAndClose(*UploadRes) error
	Recv() (*UploadDataReq, error)
	grpc.ServerStream
}

type fileUploadServer struct {
	grpc.ServerStream
}

func (x *fileUploadServer) SendAndClose(m *UploadRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileUploadServer) Recv() (*UploadDataReq, error) {
	m := new(UploadDataReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _File_DownloadInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DownloadInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/File/DownloadInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DownloadInfo(ctx, req.(*DownloadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDataReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServer).Download(m, &fileDownloadServer{stream})
}

type File_DownloadServer interface {
	Send(*DownloadDataRes) error
	grpc.ServerStream
}

type fileDownloadServer struct {
	grpc.ServerStream
}

func (x *fileDownloadServer) Send(m *DownloadDataRes) error {
	return x.ServerStream.SendMsg(m)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadInfo",
			Handler:    _File_UploadInfo_Handler,
		},
		{
			MethodName: "DownloadInfo",
			Handler:    _File_DownloadInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _File_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _File_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
